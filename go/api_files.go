/*
 * API для взаимодействия с STM32MP1
 *
 * Данное API чото гдето зочемто нужно, не очень понятно. Но пусть будет, что мешает штоли?
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"

	"../control"
)

var newList []control.ListElement = make([]control.ListElement, 0, 50)

func FileAddElem(w http.ResponseWriter, r *http.Request) {
	var res RespFileElemResults
	var resp RespFileElem

	elem, err := parsePhoneName(r)

	if err == 0 {
		log.Printf("Name %s, Phone %s", elem.Name, elem.Phone)
		ret := control.AddToWhiteList(elem)
		if ret == nil {
			res.Phone = elem.Phone
			res.Surname = elem.Surname
			res.Name = elem.Name
			res.Patronymic = elem.Patronymic
			res.Role = elem.Role
			res.AreaNum = elem.AreaNum

			resp.Results = &res
			resp.Status = "OK"
		} else {
			log.Println(ret)
			resp.Status = "EXECUTE_ERROR"
		}
	} else {
		resp.Status = "INVALID_REQUEST"
	}

	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	str, _ := json.Marshal(resp)
	w.Write(str)
}

func FileRemoveElem(w http.ResponseWriter, r *http.Request) {
	var res RespFileElemResults
	var resp RespFileElem

	elem, err := parsePhoneName(r)

	if err == 0 {
		idx := control.SearchWhiteListByPhone(elem.Phone)
		remElem, ret := control.RemFromWhiteListIdx(idx)
		if ret == nil {
			res.Phone = remElem.Phone
			res.Surname = remElem.Surname
			res.Name = remElem.Name
			res.Patronymic = remElem.Patronymic
			res.Role = remElem.Role
			res.AreaNum = remElem.AreaNum

			resp.Results = &res
			resp.Status = "OK"
		} else {
			log.Println(ret)
			resp.Status = "EXECUTE_ERROR"
		}
	} else {
		resp.Status = "INVALID_REQUEST"
	}

	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	str, _ := json.Marshal(resp)
	w.Write(str)
}

func GetFilePhones(w http.ResponseWriter, r *http.Request) {
	var resp RespFilephones

	resp.Results = make([][6]string, len(control.WhiteList))
	for i := 0; i < len(control.WhiteList); i++ {
		resp.Results[i][0] = control.WhiteList[i].Phone
		resp.Results[i][1] = control.WhiteList[i].Surname
		resp.Results[i][2] = control.WhiteList[i].Name
		resp.Results[i][3] = control.WhiteList[i].Patronymic
		resp.Results[i][4] = control.WhiteList[i].Role
		resp.Results[i][5] = control.WhiteList[i].AreaNum
	}

	resp.Status = "OK"

	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	str, _ := json.Marshal(resp)
	w.Write(str)
}

func PreSetFilePhones(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Methods", "POST")
	w.Header().Set("Access-Control-Allow-Headers", "Content-Type")
	w.Header().Set("Access-Control-Max-Age", "86400")
	w.WriteHeader(http.StatusOK)
}

func SetFilePhones(w http.ResponseWriter, r *http.Request) {
	var elem control.ListElement
	var resp RespFilephones
	body, err := ioutil.ReadAll(r.Body)
	if err != nil {
		log.Printf("Error reading body: %v", err)
	}

	err = json.Unmarshal(body, &resp.Results)
	newList = nil
	for i := 0; i < len(resp.Results); i++ {
		elem.Phone = resp.Results[i][0]
		elem.Surname = resp.Results[i][1]
		elem.Name = resp.Results[i][2]
		elem.Patronymic = resp.Results[i][3]
		elem.Role = resp.Results[i][4]
		elem.AreaNum = resp.Results[i][5]
		newList = append(newList, elem)
	}
	err = control.WritePhonesFile(&newList)
	if err != nil {
		log.Printf("Failed to write file: %q\n", err)
		control.WritePhonesFile(&control.WhiteList)
	} else {
		control.ReadPhonesFile()
	}

	for i := 0; i < len(control.WhiteList); i++ {
		resp.Results[i][0] = control.WhiteList[i].Phone
		resp.Results[i][1] = control.WhiteList[i].Surname
		resp.Results[i][2] = control.WhiteList[i].Name
		resp.Results[i][3] = control.WhiteList[i].Patronymic
		resp.Results[i][4] = control.WhiteList[i].Role
		resp.Results[i][5] = control.WhiteList[i].AreaNum
	}
	resp.Status = "OK"

	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	str, _ := json.Marshal(resp)
	w.Write(str)
}
